# Generated by Django 5.1.7 on 2025-04-15 10:46
from datetime import datetime

from django.db import migrations, models

from club.settings import MODERATOR_USERNAME, DELETED_USERNAME
from utils.strings import random_string

DOCS = [
    {
        "slug": "blocked_dolor",
        "type": "docs",
        "title": "üí∞ –ö–∞–∫ –ø–ª–∞—Ç–∏—Ç—å –∑–∞ –ö–ª—É–± –∏–∑ –†–æ—Å—Å–∏–∏ –∏ –ë–µ–ª–∞—Ä—É—Å–∏",
        "text": "WRITE ME",
        "is_visible": True,
        "is_visible_in_feeds": False,
        "is_approved_by_moderator": False,
        "is_public": True,
    },
    {
        "slug": "contact",
        "type": "docs",
        "title": "üìû –°–≤—è–∑—å —Å –ö–ª—É–±–æ–º",
        "text": "WRITE ME",
        "is_visible": True,
        "is_visible_in_feeds": False,
        "is_approved_by_moderator": False,
        "is_public": True,
    },
    {
        "slug": "privacy_policy",
        "type": "docs",
        "title": "–ü–æ–ª–∏—Ç–∏–∫–∞ –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏",
        "text": "WRITE ME",
        "is_visible": True,
        "is_visible_in_feeds": False,
        "is_approved_by_moderator": False,
        "is_public": True,
    },
    {
        "slug": "about",
        "type": "docs",
        "title": "–û –ö–ª—É–±–µ üé©",
        "text": "WRITE ME",
        "is_visible": True,
        "is_visible_in_feeds": False,
        "is_approved_by_moderator": False,
        "is_public": True,
    },
]

now = datetime.utcnow()


def create_moderator_user(apps, schema_editor):
    User = apps.get_model("users", "User")
    User.objects.get_or_create(
        slug=MODERATOR_USERNAME,
        defaults=dict(
            email="moderator@vas3k.club",
            secret_hash=random_string(length=20),
            membership_platform_type="direct",
            full_name="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä",
            company="–í–∞—Å—Ç—Ä–∏–∫.–ö–ª—É–±",
            position="–ë–¥—é",
            city="–ë–µ—Ä–ª–∏–Ω",
            country="–ì–µ—Ä–º–∞–Ω–∏—è",
            membership_started_at=now,
            membership_expires_at=now,
            created_at=now,
            updated_at=now,
            is_email_unsubscribed=True,
            moderation_status="approved",
            roles=["moderator"],
        ),
    )


def create_deleted_user(apps, schema_editor):
    User = apps.get_model("users", "User")
    User.objects.get_or_create(
        slug=DELETED_USERNAME,
        defaults=dict(
            email="deleted@vas3k.club",
            secret_hash=random_string(length=20),
            membership_platform_type="direct",
            full_name="üíÄ –Æ–∑–µ—Ä-–∑–æ–º–±–∏",
            company="[object Object]",
            position="None",
            city=None,
            country="–†–æ—Å—Å–∏—è",
            membership_started_at=now,
            membership_expires_at=now,
            created_at=now,
            updated_at=now,
            is_email_unsubscribed=True,
            moderation_status="approved",
        ),
    )


def insert_main_docs(apps, schema_editor):
    User = apps.get_model("users", "User")
    Post = apps.get_model("posts", "Post")

    author = User.objects.filter(slug=MODERATOR_USERNAME).first()
    if not author:
        return

    for doc in DOCS:
        Post.objects.get_or_create(
            slug=doc["slug"],
            defaults={
                "type": doc["type"],
                "title": doc["title"],
                "text": doc["text"],
                "author": author,
                "created_at": now,
                "updated_at": now,
                "last_activity_at": now,
                "published_at": now,
                "is_visible": doc["is_visible"],
                "is_visible_in_feeds": doc["is_visible_in_feeds"],
                "is_commentable": False,
                "is_approved_by_moderator": True,
                "is_public": doc["is_public"],
            },
        )


class Migration(migrations.Migration):
    dependencies = [
        ('posts', '0028_postview_post_views_post_id_49dd7e_idx'),
    ]

    operations = [
        migrations.AlterField(
            model_name='historicalpost',
            name='type',
            field=models.CharField(
                choices=[('post', '–¢–µ–∫—Å—Ç'), ('intro', '#intro'), ('link', '–°—Å—ã–ª–∫–∞'), ('question', '–í–æ–ø—Ä–æ—Å'),
                         ('idea', '–ò–¥–µ—è'), ('project', '–ü—Ä–æ–µ–∫—Ç'), ('event', '–°–æ–±—ã—Ç–∏–µ'), ('battle', '–ë–∞—Ç–ª'),
                         ('weekly_digest', '–ñ—É—Ä–Ω–∞–ª –ö–ª—É–±–∞'), ('guide', '–ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å'), ('thread', '–¢—Ä–µ–¥'),
                         ('docs', '–î–æ–∫–∏')], db_index=True, default='post', max_length=32),
        ),
        migrations.AlterField(
            model_name='post',
            name='type',
            field=models.CharField(
                choices=[('post', '–¢–µ–∫—Å—Ç'), ('intro', '#intro'), ('link', '–°—Å—ã–ª–∫–∞'), ('question', '–í–æ–ø—Ä–æ—Å'),
                         ('idea', '–ò–¥–µ—è'), ('project', '–ü—Ä–æ–µ–∫—Ç'), ('event', '–°–æ–±—ã—Ç–∏–µ'), ('battle', '–ë–∞—Ç–ª'),
                         ('weekly_digest', '–ñ—É—Ä–Ω–∞–ª –ö–ª—É–±–∞'), ('guide', '–ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å'), ('thread', '–¢—Ä–µ–¥'),
                         ('docs', '–î–æ–∫–∏')], db_index=True, default='post', max_length=32),
        ),
        migrations.RunPython(create_moderator_user),
        migrations.RunPython(create_deleted_user),
        migrations.RunPython(insert_main_docs),
    ]
